version: 2.1
executors:
  rust-build:
    working_directory: /source # directory where steps will run
    docker:
      - image: opesunite/rust-build:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:12
        environment:
          POSTGRES_USER: streaker
          POSTGRES_DB: streaker
          POSTGRES_PASSWORD: streaker
    environment:
      # specify cargo target dir to make sure
      # all deps are compiled into that dir and the whole
      # workspace can use it
      CARGO_TARGET_DIR: "/source/target"

jobs:
  build:
    executor: rust-build
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Environment information
          command: env
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run: 
          name: Migrate database
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: cd migrate && cargo run 
      - run:
          name: Build all targets
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: cargo build --release
      - run:
          name: Build WASM frontend
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: cd frontend && wasm-pack build --target web --out-name wasm --out-dir ./static --release
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - /source/target
          key: v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}

      - persist_to_workspace:
          root: .
          paths:
            - frontend/static

  deploy_production:
    executor: rust-build
    steps:
      - attach_workspace:
          at: /source
      - run: cd frontend/static/ && aero deploy 

  # to deploy the backend, we need to take
  # the release build and put it into a docker
  # container. Push it to the amazon aws ecr
  # which will require the aws credentials.
  #
  # after we did this we need to install upgrade
  # the helm chart on the cluster.
  deploy_backend:
    executor: rust-build
    steps:
      - attach_workspace:
          at: /source
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
         cd backend 
         docker build -t 193722696917.dkr.ecr.us-east-1.amazonaws.com/opesunite/streaker:latest .
         docker push 193722696917.dkr.ecr.us-east-1.amazonaws.com/opesunite/streaker:latest

  

workflows:
  version: 2
  aero_deploy:
    jobs:
      - build
      - deploy_backend:
          requires:
            - build
          filters:
            branches:
              only: production
      - deploy_production:
          requires:
            - build
          filters:
            branches:
              only: production
