version: 2.1
executors:
  rust-build:
    working_directory: /source # directory where steps will run
    docker:
      - image: opesunite/rust-build:latest

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:12
        environment:
          POSTGRES_USER: streaker
          POSTGRES_DB: streaker
          POSTGRES_PASSWORD: streaker
    environment:
      # specify cargo target dir to make sure
      # all deps are compiled into that dir and the whole
      # workspace can use it
      CARGO_TARGET_DIR: "/source/target"

jobs:
  build:
    executor: rust-build
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - run:
          name: Environment information
          command: env
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}
      - run: 
          name: Migrate database
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: cd migrate && cargo run 
      - run:
          name: Build backend
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: |
            cd backend
            cargo build --target x86_64-unknown-linux-musl --release --target-dir build
      - run:
          name: Build WASM frontend
          environment:
            DATABASE_URL: "postgres://streaker:streaker@localhost:5432/streaker"
          command: |
            cd frontend 
            wasm-pack build --target web --out-name wasm --out-dir ./static --release
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - /source/target
          key: v4-cargo-cache-{{ arch }}-{{ checksum "Cargo.lock" }}

      - persist_to_workspace:
          root: .
          paths:
            - frontend/static
            - backend
            - common
            - migrate
            - target

  deploy_frontend:
    executor: rust-build
    steps:
      - attach_workspace:
          at: /source
      - run: cd frontend/static/ && aero deploy 

  # to deploy the backend, we need to take
  # the release build and put it into a docker
  # container. Push it to the amazon aws ecr
  # which will require the aws credentials.
  #
  # after we did this we need to install upgrade
  # the helm chart on the cluster.
  deploy_backend:
    executor: rust-build
    steps:
      - attach_workspace:
          at: /source
      - setup_remote_docker:
          docker_layer_caching: false
      # use the statically build binary from
      # the build steps before to build a Docker 
      # container and push this to the AWS repo.
      #
      # Update the kubectl stuff and push it
      # to the cluster.
      - run: |
         cd backend 

         find build

         # We use the artifact of the previous
         # build step which should be in 
         #    `build/x86_64-unknown-linux-musl/streaker`
         # in the backend dir.
         
         # this escape \<< is circeci specific
         cat \<<EOS >Dockerfile
         FROM scratch
         COPY build/x86_64-unknown-linux-musl/streaker .
         USER 1000
         CMD ["./streaker"]
         EOS

         # Login to the aws account, authentication via secret env vars
         aws ecr get-login-password | docker login --username AWS --password-stdin 193722696917.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

         docker build -t 193722696917.dkr.ecr.us-east-1.amazonaws.com/opesunite/streaker:latest .
         docker push 193722696917.dkr.ecr.us-east-1.amazonaws.com/opesunite/streaker:latest

         # Login to kubectl, to get access to our cluster
         aws eks update-kubeconfig --name infrastructure-node-cluster

         # Just list the pods for now
         kubectl get pods

workflows:
  version: 2
  aero_deploy:
    jobs:
      - build
      - deploy_backend:
          requires:
            - build
          filters:
            branches:
              only: production
      # - deploy_frontend:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: production
